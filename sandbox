#!/usr/bin/env bash
set -euo pipefail

#########################
# Helpers and utilities #
#########################

# Compatibility with Windows / MSYS2
# 1. Use // to prevent msys to convert to Windows PATH on Windows
#   when using inside Docker
#   see http://www.mingw.org/wiki/Posix_path_conversion
# 2. Use $PTY_DOCKER for all commands that require a PTY (-t)
PTY_DOCKER=docker
if [ "$(uname)" == "Darwin" ]; then
  true
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ] || \
     [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
  PTY_DOCKER="winpty docker"
fi

# Console colorized print helpers
red=`echo -en "\e[31m"`
green=`echo -en "\e[32m"`
default=`echo -en "\e[39m"`

function printc () {
  printf "$1$2${default}\n"
}

function statusline () {
  printf "${green}$1${default}\n"
}

function err_noexit () {
  printf "${red}$1${default}\n"
}
function err () {
  printf "${red}$1\n\nSee sandbox.log for more details.${default}\n"
  exit 1
}

# Overwrite the current line on the terminal
function overwrite() {
  echo -e "\r\033[1A\033[0K$@";
}


# Yes/no prompt around the clean command
function ask_clean () {
  if ask "$1"; then
    clean
  else
    exit 1
  fi
}

# Interactive yes/no prompt
function ask () {
    # https://djm.me/ask
    local prompt default reply

    if [ "${2:-}" = "Y" ]; then
        prompt="Y/n"
        default=Y
    elif [ "${2:-}" = "N" ]; then
        prompt="y/N"
        default=N
    else
        prompt="y/n"
        default=
    fi

    while true; do

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "$1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read reply </dev/tty

        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

# Spinner - https://stackoverflow.com/a/20369590
# Show a spinner for long running commands:
#   (command) & spinner
function spinner()
{
  local pid=$!
  local delay=0.75
  local spinstr='|/-\'
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf " [%c]  " "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

# Progress bar - https://stackoverflow.com/a/28044986
# 1. Create progress_bar function
# 1.1 Input is prefixString($1) currentState($2) and totalState($3)
function progress_bar {
  local progress
  local done
  local left
  local fill
  local empty

  # Process data
  progress=$(( $(( ${2} * 100 / ${3} * 100)) / 100))
  done=$(( $(( ${progress} * 4 )) / 10 ))
  left=$(( 40 - $done ))

  # Build progressbar string lengths
  fill=$(printf "%${done}s")
  empty=$(printf "%${left}s")

  # 1.2 Build progressbar strings and print the progress_bar line
  # 1.2.1 Output example:
  # 1.2.1.1 Progress : [****************************************] 100%
  overwrite "$1 : [${fill// /â–‡}${empty// / }] [$2/$3] ${progress}%"
}

#####################
# Script constants. #
#####################
FAST_CATCHUP_URL='https://algorand-catchpoints.s3.us-east-2.amazonaws.com/channel/CHANNEL/latest.catchpoint'

# Global flags
USE_FAST_CATCHUP=1

sandbox () {
  status_helper () {
    $PTY_DOCKER exec -i sandbox goal node status
  }

  goal_helper () {
    $PTY_DOCKER exec --workdir //opt/algorand/node/data -it sandbox goal "$@"
  }

  perform_fast_catchup () {
    local CATCHPOINT
    CATCHPOINT=$(curl -s -S $FAST_CATCHUP_URL)
    goal_helper node catchup "$CATCHPOINT"

    if [ $? -ne 0 ]; then
      err "There was a problem starting fast catchup."
    fi

    # Newline for the progress bar to use.
    echo ""
    DONE=false
    STARTED=false
    while [ $DONE == "false" ]; do
      sleep 0.1

      local RES
      local TOTAL
      local PROGRESS

      RES="$(status_helper)"
      TOTAL=1000
      PROGRESS=0

      # If progress has been made, update the progress.
      if [[ "$RES" == *"Catchpoint total accounts"* ]]; then
        STARTED=true
        TOTAL=$(echo $RES | grep -o 'Catchpoint total accounts: [[:digit:]]*' | cut -d':' -f 2 )
        PROGRESS=$(echo $RES | grep -o 'Catchpoint accounts processed: [[:digit:]]*' | cut -d':' -f 2 )
      elif [ $STARTED == "true" ]; then
        DONE=true
        PROGRESS=$TOTAL
      fi

      if [ $TOTAL == $PROGRESS ]; then
        DONE=true
      else
        progress_bar "Processing accounts:" "$PROGRESS" "$TOTAL"
      fi
    done

    overwrite "Account processing complete."

    # Newline for the progress bar to use.
    echo ""

    DONE=false
    STARTED=false
    while [ $DONE == "false" ]; do
      sleep 0.1

      local RES
      local TOTAL
      local PROGRESS

      RES="$(status_helper)"
      TOTAL=1000
      PROGRESS=0

      # If progress has been made, update the progress.
      if [[ "$RES" == *"Catchpoint downloaded blocks"* ]]; then
        STARTED=true
        TOTAL=$(echo $RES | grep -o 'Catchpoint total blocks: [[:digit:]]*' | cut -d ':' -f 2 )
        PROGRESS=$(echo $RES | grep -o 'Catchpoint downloaded blocks: [[:digit:]]*' | cut -d ':' -f 2 )
      elif [ $STARTED == "true" ]; then
        DONE=true
        PROGRESS=$TOTAL
      fi

      if [ $TOTAL == $PROGRESS ]; then
        DONE=true
      else
        progress_bar "Downloading blocks:" "$PROGRESS" "$TOTAL"
      fi
    done

    # Clear progress bar line and print success text.
    overwrite "Blocks downloaded."

    sleep 1
  }

  clean () {
    statusline "Stopping running container..."
    docker kill sandbox > /dev/null 2>&1 || true

    statusline "Stopping and removing running sandbox container..."
    docker rm sandbox > /dev/null 2>&1 || true
    docker rmi $(docker images --filter=reference=algorand-sandbox -q) > /dev/null 2>&1 || true
    docker rmi $(docker images -f "dangling=true" -q) > /dev/null 2>&1 || true
    docker volume rm algorand-sandbox-data > /dev/null 2>&1 || true

    statusline "Removing algorand sandbox data..."
    rm -rf data

  }

  # Enter attaches users to a shell in the desired container
  enter () {
    statusline "Entering /bin/bash session in the sandbox container..."
    $PTY_DOCKER exec --workdir //opt/algorand/node -it sandbox //bin/bash
  }

  # Logs streams the logs from the container to the shell
  logs () {
    if [[ $# -gt 1 && $2 == "raw" ]]; then
      $PTY_DOCKER exec -it sandbox tail -f //opt/algorand/node/data/node.log
    else
      $PTY_DOCKER exec -it sandbox carpenter -D
    fi
  }

  # Start the algorand node
  up () {
    # Set default to testnet case a network wasn't provided
    NETWORK=${2:-testnet}

    GENESIS_VERSION="$NETWORK-v1.0"
    FAST_CATCHUP_URL="${FAST_CATCHUP_URL/CHANNEL/$NETWORK}"
    case $NETWORK in
      mainnet)
        CHANNEL=stable
        CONFIG=config.json
        ;;
      testnet)
        CHANNEL=stable
        CONFIG=config.json
        ;;
      betanet)
        CHANNEL=beta
        CONFIG=beta.config.json
        ;;
      *)
        err "Invalid network '$2', use one of ['mainnet', 'testnet', 'betanet']."
        ;;
    esac

    # Validate/repair data directory
    if [[ -d data ]]; then
      if [[ ! -f data/network ]]; then
        err_noexit "Detected a corrupt data directory..."
        ask_clean "Would you like to remove it and continue?"
      elif [[ $# -gt 1 && -f data/network && "$(cat data/network)" != $2 && "$(docker ps -a --filter name=sandbox -q)" ]]; then
        err_noexit "The sandbox is already configured to run '$(cat data/network)'."
        ask_clean "Would you like to reset the sandbox to run '$2'?"
      fi
    fi


    # Resume or initialize sandbox
    if [[ -f data ]]; then
      statusline "Starting the existing sandbox..."
      # Use variable $ERROR instead of status $?
      # as we are using set -e which aborts in case of non-zero status
      ERROR=0
      docker start sandbox > /dev/null || ERROR=1

      if [[ $ERROR -ne 0 ]]; then
        # Check if the error is not just due to docker daemon not running
        if ! docker info 2>/dev/null > /dev/null; then
          err 'Docker is not running. Run `docker info` for more information.'
        fi

        # This is another error that may require reset of the sandbox
        err_noexit "Detected an error from the docker command."
        if [[ $# -eq 0 ]]; then
          NETWORK=$(cat data/network)
        fi
        ask_clean "Would you like to reset the sandbox and try again?"
        statusline "Starting '$NETWORK' sandbox..."
        up $NETWORK
      fi
    else
      statusline "\nBuilding a new Docker Image..."
      (docker build \
        --build-arg channel=$CHANNEL \
        -t \
        algorand-sandbox:$CHANNEL \
        . \
        -f images/Dockerfile >> sandbox.log) & spinner

      # Create a new data directory
      if [ ! -f data ]; then
        statusline "\nInitializing data directory for $NETWORK..."

        # Configure the node
        mkdir -p data/kmd-v0.5
        cp config/$CONFIG data/config.json
        cp config/token data/algod.token
        cp config/kmd_config.json data/kmd-v0.5
        cp config/token data/kmd-v0.5/kmd.token
        chmod 700 data/kmd-v0.5
        cp genesis/${NETWORK}/genesis.json data

        # Copy to the Docker container
        tar -cf - data | docker run --name sandbox \
          --mount source="algorand-sandbox-data",target=//opt/algorand/node/data \
          --entrypoint="" \
          -i \
          algorand-sandbox:$CHANNEL \
          tar -C //opt/algorand/node -x
        docker rm sandbox > /dev/null

        # Remember the network being used
        echo "$NETWORK" > data/network
      fi

      statusline "\nStarting a new Docker Container..."
      docker run \
        -p 4001:4001 \
        -p 4002:4002 \
        --name sandbox \
        --mount source="algorand-sandbox-data",target=//opt/algorand/node/data \
        -d \
        algorand-sandbox:$CHANNEL >> sandbox.log

      statusline "\nSandbox started! Printing status..."

      sleep 1
      status_helper

      if [[ $USE_FAST_CATCHUP == 1 ]]; then
        statusline "\nStarting fast-catchup..."
        if [[ ${FAST_CATCHUP_URL:=""} == "" || ${GENESIS_VERSION:=""} == "" ]]; then
          err_noexit "Fast catchup is not available for $NETWORK, continuing without catchup."
        else
          perform_fast_catchup

          statusline "\nFast-catchup complete! Printing status..."
          status_helper
        fi
      fi
    fi
  }

  help () {
      cat <<-EOF
sandbox commands:
  up [mainnet||testnet||betanet] [-s||--skip-snapshot]
          -> spin up the sandbox environment, uses testnet by default.
             Optionally provide -s to skip initializing with a snapshot.
  down    -> tear down the sandbox environment
  restart -> restart the sandbox
  enter   -> enter the sandbox container
  clean   -> stops and deletes containers and data directory
  test    -> runs some tests to make sure everything is working correctly

algorand commands:
  logs        -> stream algorand logs with the carpenter utility
  status      -> get node status
  goal (args) -> run goal command like 'goal node status'
  dryrun (tx) -> run 'goal clerk dryrun -t tx' to test a transaction file

tutorials:
  introduction -> learn how to get Algos on testnet and create a transaction

EOF
  }

  if [ $# -eq 0 ]; then
    help
    exit 1
  fi

  case $1 in
    up)
      up "$@"
      ;;

    down)
      statusline "Stopping sandbox container..."
      docker kill sandbox > /dev/null
      ;;

    restart)
      statusline "Restarting sandbox process..."
      docker restart sandbox > /dev/null
      ;;

    clean)
      clean
      ;;

    test)
      printc $red "Test command forwarding..."
      printc $default "~$ ${green}docker exec -it sandbox uname -a"
      docker exec -it sandbox uname -a

      printc $red "\nTest algod..."
      printc $default "~$ ${green}docker exec -it sandbox /opt/algorand/node/goal node status -d /opt/algorand/node/data"
      status_helper

      printc $red "\nTest Algod REST API..."
      printc $default "~$ ${green}curl localhost:4001/v1/status -H \"X-Algo-API-Token: \$(cat config/token)\""
      curl localhost:4001/v1/status -H "X-Algo-API-Token: $(cat config/token)"

      printc $red "\nTest KMD REST API..."
      printc $default "~$ ${green}curl localhost:4002/v1/wallets -H \"X-KMD-API-Token: \$(cat config/token)\""
      curl localhost:4002/v1/wallets -H "X-KMD-API-Token: $(cat config/token)"

      printf "\n\n"
      ;;

    enter)
      enter "$@"
      ;;

    logs)
      logs "$@"
      ;;

    status)
      status_helper
      ;;

    goal)
      shift
      goal_helper "$@"
      ;;

    dryrun)
      shift
      cp $1 data
      $PTY_DOCKER exec --workdir //opt/algorand/node/data -it sandbox goal clerk dryrun -t "$(basename $1)"
      ;;

    introduction)
      ./utils/transaction.sh
      ;;

    *)
      help
      ;;
  esac
}

##############
# Entrypoint #
##############

# Process flags
PARAMS=()
while (( "$#" )); do
  case "$1" in
    -s|--skip-fast-catchup)
      USE_FAST_CATCHUP=0
      shift
      ;;
    *) # preserve positional arguments
      PARAMS+=("$1")
      shift
      ;;
  esac
done

# Make sure docker is installed
if ! [ -x "$(command -v docker)" ]; then
  err 'Error: docker is not installed.' >&2
fi

pushd `dirname $0` > /dev/null
sandbox "${PARAMS[@]-}"
popd > /dev/null
